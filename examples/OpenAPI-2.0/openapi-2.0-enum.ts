/* tslint:disable */
/*--------------------------------------------------------------------------------------------

*  This is an example output of schema2ts
*  Original input is: C:\Users\Jack\Workspace\schema2ts\examples/sources/openapi-2.0-enum.yaml
*
*  Generated by:
* 	    schema2ts 0.5.0
* 	    Typescript ^2.6.0
*
*  See syntax error in this file?
*       We are working for these features that will break schema2ts, thanks for your waiting
*--------------------------------------------------------------------------------------------*/
/* tslint:disable */
import axios, { AxiosInstance, AxiosPromise } from "axios";
export interface _Response<Status, Data = any, ResponseHeader = any> {
    data: Data;
    status: Status;
    statusText: string;
    headers: ResponseHeader;
    request?: any;
}
export const _ = {
    lib: axios.create({ withCredentials: true }),
    removeEmpty(obj: any) {
        const cloned = { ...obj };
        for (const i in cloned) {
            if (cloned[i] === undefined) {
                delete cloned[i];
            }
        }
        return obj;
    },
    getPathParam(url: string, params: any) {
        const data = _.removeEmpty(params);
        for (const key in data) {
            const obj = data[key];
            url = url.replace(`{${key}}`, obj.toString());
        }
        return url;
    },
    async request(url: string, method: string, { query = {}, body = {}, path = {}, headers = {}, bodyType = {}, }: {
            query?: any;
            body?: any;
            path?: any;
            headers?: any;
            bodyType?: "json" | "form";
        }) {
        headers = { ...headers };
        if (!headers["Content-Type"] && bodyType === "form") {
            headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        const request = await _.lib.request({
            method,
            url: _.getPathParam(url, path),
            params: _.removeEmpty(query),
            data: _.removeEmpty(body),
            headers,
        });
        return {
            data: request.data,
            headers: request.headers,
            request: request.request,
            status: request.status as any,
            statusText: request.statusText,
        };
    },
};

export var products_get_url = "/products";
export var products_get_method = "get";
export enum Colors {
    black = "black",
    white = "white",
    red = "red",
    green = "green",
    blue = "blue"
}
export enum Language {
    Typescript = 0,
    Javascript = 1
}
export interface products_get_parameter_query {
    "color": Colors;
    "lang": Language;
    "direction": "left" | "right";
    /** enum:
    *   peter: 0
    *   jack: 1 */
    "name": 0 | 1;
}
export function products_get(query: products_get_parameter_query): Promise<_Response<any>> {
    return _.request(products_get_url, products_get_method, { query: query, bodyType: "json" });
}