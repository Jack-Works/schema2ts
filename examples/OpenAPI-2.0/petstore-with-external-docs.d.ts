/* tslint:disable */
/*--------------------------------------------------------------------------------------------

*  This is an declarationsOnly mode example output of schema2ts
*  Original input is: https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/yaml/petstore-with-external-docs.yaml
*
*  Generated by:
* 	    schema2ts 0.5.0-beta.3
* 	    Typescript ^2.6.0
*
*  See syntax error in this file?
*       We are working for these features that will break schema2ts, thanks for your waiting
*--------------------------------------------------------------------------------------------*/
import { AxiosInstance } from "axios";
export interface _Response<Status, Data> {
    data: Data;
    status: Status;
    statusText: string;
    headers: any;
    request?: any;
}
export declare const _: {
    lib: AxiosInstance;
    removeEmpty(obj: any): any;
    getPathParam(url: string, params: any): string;
    request(url: string, method: string, {query, body, path, headers, bodyType}: {
        query?: any;
        body?: any;
        path?: any;
        headers?: any;
        bodyType?: "json" | "form";
    }): Promise<{
        data: any;
        headers: any;
        request: any;
        status: any;
        statusText: string;
    }>;
};
export declare var findPets_url: string;
export declare var findPets_method: string;
export declare var addPet_url: string;
export declare var addPet_method: string;
export declare var findPetById_url: string;
export declare var findPetById_method: string;
export declare var deletePet_url: string;
export declare var deletePet_method: string;
export declare type findPets_parameter_query = {
    "tags": string[];
    "limit": number;
};
export declare type findPets_result_200 = ({
    "name": string;
    "tag"?: string;
})[];
export declare type findPets_result_default = {
    "code": number;
    "message": string;
};
/** Returns all pets from the system that the user has access to */
export declare function findPets_invoke(query: findPets_parameter_query): Promise<_Response<200, ({
    "name": string;
    "tag"?: string;
})[]> | _Response<"default", {
    "code": number;
    "message": string;
}>>;
export declare type addPet_parameter_body = {
    "name": string;
    "tag"?: string;
};
export declare type addPet_result_200 = {
    "name": string;
    "tag"?: string;
};
export declare type addPet_result_default = {
    "code": number;
    "message": string;
};
/** Creates a new pet in the store.  Duplicates are allowed */
export declare function addPet_invoke(body: addPet_parameter_body): Promise<_Response<200, {
    "name": string;
    "tag"?: string;
}> | _Response<"default", {
    "code": number;
    "message": string;
}>>;
export declare type findPetById_parameter_path = {
    "id": number;
};
export declare type findPetById_result_200 = {
    "name": string;
    "tag"?: string;
};
export declare type findPetById_result_default = {
    "code": number;
    "message": string;
};
/** Returns a user based on a single ID, if the user does not have access to the pet */
export declare function findPetById_invoke(path: findPetById_parameter_path): Promise<_Response<200, {
    "name": string;
    "tag"?: string;
}> | _Response<"default", {
    "code": number;
    "message": string;
}>>;
export declare type deletePet_parameter_path = {
    "id": number;
};
export declare type deletePet_result_default = {
    "code": number;
    "message": string;
};
/** deletes a single pet based on the ID supplied */
export declare function deletePet_invoke(path: deletePet_parameter_path): Promise<_Response<"default", {
    "code": number;
    "message": string;
}>>;
