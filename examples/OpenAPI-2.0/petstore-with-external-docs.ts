/* tslint:disable */
/*--------------------------------------------------------------------------------------------

*  This is an example output of schema2ts
*  Original input is: https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/yaml/petstore-with-external-docs.yaml
*
*  Generated by:
* 	    schema2ts 0.5.0-beta.3
* 	    Typescript ^2.6.0
*
*  See syntax error in this file?
*       We are working for these features that will break schema2ts, thanks for your waiting
*--------------------------------------------------------------------------------------------*/
import axios, { AxiosInstance, AxiosPromise } from "axios";
export interface _Response<Status, Data> {
    data: Data;
    status: Status;
    statusText: string;
    headers: any;
    request?: any;
}
export const _ = {
    lib: axios.create({ withCredentials: true }),
    removeEmpty(obj: any) {
        const cloned = { ...obj };
        for (const i in cloned) {
            if (cloned[i] === undefined) {
                delete cloned[i];
            }
        }
        return obj;
    },
    getPathParam(url: string, params: any) {
        const data = _.removeEmpty(params);
        for (const key in data) {
            const obj = data[key];
            url = url.replace(`{${key}}`, obj.toString());
        }
        return url;
    },
    async request(url: string, method: string, { query = {}, body = {}, path = {}, headers = {}, bodyType = {}, }: {
            query?: any;
            body?: any;
            path?: any;
            headers?: any;
            bodyType?: "json" | "form";
        }) {
        headers = { ...headers };
        if (!headers["Content-Type"] && bodyType === "form") {
            headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        const request = await _.lib.request({
            method,
            url: _.getPathParam(url, path),
            params: _.removeEmpty(query),
            data: _.removeEmpty(body),
            headers,
        });
        return {
            data: request.data,
            headers: request.headers,
            request: request.request,
            status: request.status as any,
            statusText: request.statusText,
        };
    },
};
export var findPets_url = "/pets";
export var findPets_method = "get";
export var addPet_url = "/pets";
export var addPet_method = "post";
export var findPetById_url = "/pets/{id}";
export var findPetById_method = "get";
export var deletePet_url = "/pets/{id}";
export var deletePet_method = "delete";
export type findPets_parameter_query = {
    "tags": string[];
    "limit": number;
};
export type findPets_result_200 = ({
    "name": string;
    "tag"?: string;
})[];
export type findPets_result_default = {
    "code": number;
    "message": string;
};
/** Returns all pets from the system that the user has access to */
export function findPets_invoke(query: findPets_parameter_query): Promise<_Response<200, ({
            "name": string;
            "tag"?: string;
        })[]> | _Response<"default", {
            "code": number;
            "message": string;
        }>> {
    return _.request(findPets_url, findPets_method, { query: query, bodyType: "json" });
}
export type addPet_parameter_body = {
    "name": string;
    "tag"?: string;
};
export type addPet_result_200 = {
    "name": string;
    "tag"?: string;
};
export type addPet_result_default = {
    "code": number;
    "message": string;
};
/** Creates a new pet in the store.  Duplicates are allowed */
export function addPet_invoke(body: addPet_parameter_body): Promise<_Response<200, {
            "name": string;
            "tag"?: string;
        }> | _Response<"default", {
            "code": number;
            "message": string;
        }>> {
    return _.request(addPet_url, addPet_method, { body: body, bodyType: "json" });
}
export type findPetById_parameter_path = {
    "id": number;
};
export type findPetById_result_200 = {
    "name": string;
    "tag"?: string;
};
export type findPetById_result_default = {
    "code": number;
    "message": string;
};
/** Returns a user based on a single ID, if the user does not have access to the pet */
export function findPetById_invoke(path: findPetById_parameter_path): Promise<_Response<200, {
            "name": string;
            "tag"?: string;
        }> | _Response<"default", {
            "code": number;
            "message": string;
        }>> {
    return _.request(findPetById_url, findPetById_method, { path: path, bodyType: "json" });
}
export type deletePet_parameter_path = {
    "id": number;
};
export type deletePet_result_default = {
    "code": number;
    "message": string;
};
/** deletes a single pet based on the ID supplied */
export function deletePet_invoke(path: deletePet_parameter_path): Promise<_Response<"default", {
            "code": number;
            "message": string;
        }>> {
    return _.request(deletePet_url, deletePet_method, { path: path, bodyType: "json" });
}
