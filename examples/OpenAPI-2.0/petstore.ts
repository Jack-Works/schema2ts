/* tslint:disable */
/*--------------------------------------------------------------------------------------------
 *  This file is auto-generated on 2018-1-5 23:54:35. DO NOT modify this file directly!
 *  Generated by:
 * 	    schema2ts 0.4.4
 * 	    Typescript ^2.6.0
 *
 *  Schema2ts: https://github.com/Jack-Works/schema2tscode/
 *  Syntax Error in this file? Report there https://github.com/Jack-Works/schema2tscode/issues
 *--------------------------------------------------------------------------------------------*/
import axios, { AxiosInstance, AxiosPromise } from "axios";
export interface _Response<Status, Data> {
    data: Data;
    status: Status;
    statusText: string;
    headers: any;
    request?: any;
}
export const _ = {
    lib: axios.create({ withCredentials: true }),
    removeEmpty(obj: any) {
        const cloned = { ...obj };
        for (const i in cloned) {
            if (cloned[i] === undefined) {
                delete cloned[i];
            }
        }
        return obj;
    },
    getPathParam(url: string, params: any) {
        const data = _.removeEmpty(params);
        for (const key in data) {
            const obj = data[key];
            url = url.replace(`{${key}}`, obj.toString());
        }
        return url;
    },
    async request(url: string, method: string, { query = {}, body = {}, path = {}, headers = {}, bodyType = {}, }: {
            query?: any;
            body?: any;
            path?: any;
            headers?: any;
            bodyType?: "json" | "form";
        }) {
        headers = { ...headers };
        if (!headers["Content-Type"] && bodyType === "form") {
            headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
        const request = await _.lib.request({
            method,
            url: _.getPathParam(url, path),
            params: _.removeEmpty(query),
            data: _.removeEmpty(body),
            headers,
        });
        return {
            data: request.data,
            headers: request.headers,
            request: request.request,
            status: request.status as any,
            statusText: request.statusText,
        };
    },
};
export var listPets_url = "/pets";
export var listPets_method = "get";
export var createPets_url = "/pets";
export var createPets_method = "post";
export var showPetById_url = "/pets/{petId}";
export var showPetById_method = "get";
export type listPets_parameter_query = {
    "limit"?: number;
};
export type Pets = any[];
export type listPets_result_200 = Pets;
/** List all pets */
export function listPets_invoke(query: listPets_parameter_query): Promise<_Response<200, Pets>> {
    return _.request(listPets_url, listPets_method, { query: query, bodyType: "json" });
}
/** Create a pet */
export function createPets_invoke(): Promise<_Response<any, any>> {
    return _.request(createPets_url, createPets_method, { bodyType: "json" });
}
export type showPetById_parameter_path = {
    "petId": string;
};
export type showPetById_result_200 = Pets;
/** Info for a specific pet */
export function showPetById_invoke(path: showPetById_parameter_path): Promise<_Response<200, Pets>> {
    return _.request(showPetById_url, showPetById_method, { path: path, bodyType: "json" });
}
